/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAbArgs } from "./CreateAbArgs";
import { UpdateAbArgs } from "./UpdateAbArgs";
import { DeleteAbArgs } from "./DeleteAbArgs";
import { AbCountArgs } from "./AbCountArgs";
import { AbFindManyArgs } from "./AbFindManyArgs";
import { AbFindUniqueArgs } from "./AbFindUniqueArgs";
import { Ab } from "./Ab";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { Address } from "../../address/base/Address";
import { AbService } from "../ab.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Ab)
export class AbResolverBase {
  constructor(
    protected readonly service: AbService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Ab",
    action: "read",
    possession: "any",
  })
  async _absMeta(@graphql.Args() args: AbCountArgs): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Ab])
  @nestAccessControl.UseRoles({
    resource: "Ab",
    action: "read",
    possession: "any",
  })
  async abs(@graphql.Args() args: AbFindManyArgs): Promise<Ab[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Ab, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Ab",
    action: "read",
    possession: "own",
  })
  async ab(@graphql.Args() args: AbFindUniqueArgs): Promise<Ab | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ab)
  @nestAccessControl.UseRoles({
    resource: "Ab",
    action: "create",
    possession: "any",
  })
  async createAb(@graphql.Args() args: CreateAbArgs): Promise<Ab> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        address: args.data.address
          ? {
              connect: args.data.address,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ab)
  @nestAccessControl.UseRoles({
    resource: "Ab",
    action: "update",
    possession: "any",
  })
  async updateAb(@graphql.Args() args: UpdateAbArgs): Promise<Ab | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          address: args.data.address
            ? {
                connect: args.data.address,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ab)
  @nestAccessControl.UseRoles({
    resource: "Ab",
    action: "delete",
    possession: "any",
  })
  async deleteAb(@graphql.Args() args: DeleteAbArgs): Promise<Ab | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order], { name: "orders" })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async resolveFieldOrders(
    @graphql.Parent() parent: Ab,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Address, {
    nullable: true,
    name: "address",
  })
  @nestAccessControl.UseRoles({
    resource: "Address",
    action: "read",
    possession: "any",
  })
  async resolveFieldAddress(
    @graphql.Parent() parent: Ab
  ): Promise<Address | null> {
    const result = await this.service.getAddress(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
